
Hello World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002dcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002dcc  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa7c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001585  00000000  00000000  0002aab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac0  00000000  00000000  0002c040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f3ab  00000000  00000000  0002d508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008621  00000000  00000000  0004c8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c18f3  00000000  00000000  00054ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001167c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  00116844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002d60 	.word	0x08002d60

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002d60 	.word	0x08002d60

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fb2b 	bl	800082a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80d 	bl	80001f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f98a 	bl	80004f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001dc:	f000 f85c 	bl	8000298 <MX_TIM1_Init>
  MX_TIM15_Init();
 80001e0:	f000 f934 	bl	800044c <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2108      	movs	r1, #8
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ec:	f000 fe0e 	bl	8000e0c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x24>

080001f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b096      	sub	sp, #88	; 0x58
 80001f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2244      	movs	r2, #68	; 0x44
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f002 fda5 	bl	8002d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000214:	2302      	movs	r3, #2
 8000216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800021c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2340      	movs	r3, #64	; 0x40
 8000220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000226:	2302      	movs	r3, #2
 8000228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800022a:	2301      	movs	r3, #1
 800022c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800022e:	230a      	movs	r3, #10
 8000230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000232:	2307      	movs	r3, #7
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000236:	2302      	movs	r3, #2
 8000238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800023a:	2302      	movs	r3, #2
 800023c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fe5e 	bl	8000f04 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800024e:	f000 f98d 	bl	800056c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2303      	movs	r3, #3
 8000258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800025e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000268:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	2104      	movs	r1, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fa68 	bl	8001744 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800027a:	f000 f977 	bl	800056c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000282:	f000 fde9 	bl	8000e58 <HAL_PWREx_ControlVoltageScaling>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800028c:	f000 f96e 	bl	800056c <Error_Handler>
  }
}
 8000290:	bf00      	nop
 8000292:	3758      	adds	r7, #88	; 0x58
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b09e      	sub	sp, #120	; 0x78
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002dc:	463b      	mov	r3, r7
 80002de:	222c      	movs	r2, #44	; 0x2c
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fd34 	bl	8002d50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002e8:	4b56      	ldr	r3, [pc, #344]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80002ea:	4a57      	ldr	r2, [pc, #348]	; (8000448 <MX_TIM1_Init+0x1b0>)
 80002ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80002ee:	4b55      	ldr	r3, [pc, #340]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80002f0:	224f      	movs	r2, #79	; 0x4f
 80002f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80002f4:	4b53      	ldr	r3, [pc, #332]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80002f6:	2260      	movs	r2, #96	; 0x60
 80002f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80002fa:	4b52      	ldr	r3, [pc, #328]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80002fc:	2263      	movs	r2, #99	; 0x63
 80002fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b50      	ldr	r3, [pc, #320]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000306:	4b4f      	ldr	r3, [pc, #316]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030c:	4b4d      	ldr	r3, [pc, #308]	; (8000444 <MX_TIM1_Init+0x1ac>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000312:	484c      	ldr	r0, [pc, #304]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000314:	f001 fbe2 	bl	8001adc <HAL_TIM_Base_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800031e:	f000 f925 	bl	800056c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000326:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000328:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800032c:	4619      	mov	r1, r3
 800032e:	4845      	ldr	r0, [pc, #276]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000330:	f001 febc 	bl	80020ac <HAL_TIM_ConfigClockSource>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800033a:	f000 f917 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800033e:	4841      	ldr	r0, [pc, #260]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000340:	f001 fc23 	bl	8001b8a <HAL_TIM_PWM_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800034a:	f000 f90f 	bl	800056c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000352:	2300      	movs	r3, #0
 8000354:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800035a:	4619      	mov	r1, r3
 800035c:	4839      	ldr	r0, [pc, #228]	; (8000444 <MX_TIM1_Init+0x1ac>)
 800035e:	f001 ff5e 	bl	800221e <HAL_TIM_SlaveConfigSynchro>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000368:	f000 f900 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000378:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800037c:	4619      	mov	r1, r3
 800037e:	4831      	ldr	r0, [pc, #196]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000380:	f002 fbc6 	bl	8002b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800038a:	f000 f8ef 	bl	800056c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000396:	2300      	movs	r3, #0
 8000398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800039a:	2300      	movs	r3, #0
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003a6:	2300      	movs	r3, #0
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003ae:	2200      	movs	r2, #0
 80003b0:	4619      	mov	r1, r3
 80003b2:	4824      	ldr	r0, [pc, #144]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80003b4:	f001 fd6a 	bl	8001e8c <HAL_TIM_PWM_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80003be:	f000 f8d5 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c6:	2204      	movs	r2, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	481e      	ldr	r0, [pc, #120]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80003cc:	f001 fd5e 	bl	8001e8c <HAL_TIM_PWM_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80003d6:	f000 f8c9 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003de:	2208      	movs	r2, #8
 80003e0:	4619      	mov	r1, r3
 80003e2:	4818      	ldr	r0, [pc, #96]	; (8000444 <MX_TIM1_Init+0x1ac>)
 80003e4:	f001 fd52 	bl	8001e8c <HAL_TIM_PWM_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80003ee:	f000 f8bd 	bl	800056c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 80003fe:	2364      	movs	r3, #100	; 0x64
 8000400:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000418:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000422:	463b      	mov	r3, r7
 8000424:	4619      	mov	r1, r3
 8000426:	4807      	ldr	r0, [pc, #28]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000428:	f002 fbd8 	bl	8002bdc <HAL_TIMEx_ConfigBreakDeadTime>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000432:	f000 f89b 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000436:	4803      	ldr	r0, [pc, #12]	; (8000444 <MX_TIM1_Init+0x1ac>)
 8000438:	f000 f906 	bl	8000648 <HAL_TIM_MspPostInit>

}
 800043c:	bf00      	nop
 800043e:	3778      	adds	r7, #120	; 0x78
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000074 	.word	0x20000074
 8000448:	40012c00 	.word	0x40012c00

0800044c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000462:	463b      	mov	r3, r7
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_TIM15_Init+0x9c>)
 800046e:	4a1f      	ldr	r2, [pc, #124]	; (80004ec <MX_TIM15_Init+0xa0>)
 8000470:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000472:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_TIM15_Init+0x9c>)
 8000474:	224f      	movs	r2, #79	; 0x4f
 8000476:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_TIM15_Init+0x9c>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_TIM15_Init+0x9c>)
 8000480:	2263      	movs	r2, #99	; 0x63
 8000482:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_TIM15_Init+0x9c>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_TIM15_Init+0x9c>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_TIM15_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000496:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_TIM15_Init+0x9c>)
 8000498:	f001 fb20 	bl	8001adc <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80004a2:	f000 f863 	bl	800056c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_TIM15_Init+0x9c>)
 80004b6:	f001 feb2 	bl	800221e <HAL_TIM_SlaveConfigSynchro>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80004c0:	f000 f854 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80004cc:	463b      	mov	r3, r7
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_TIM15_Init+0x9c>)
 80004d2:	f002 fb1d 	bl	8002b10 <HAL_TIMEx_MasterConfigSynchronization>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80004dc:	f000 f846 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000028 	.word	0x20000028
 80004ec:	40014000 	.word	0x40014000

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_GPIO_Init+0x74>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <MX_GPIO_Init+0x74>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_GPIO_Init+0x74>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_GPIO_Init+0x74>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <MX_GPIO_Init+0x74>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_GPIO_Init+0x74>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2108      	movs	r1, #8
 800053a:	480b      	ldr	r0, [pc, #44]	; (8000568 <MX_GPIO_Init+0x78>)
 800053c:	f000 fc66 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000540:	2308      	movs	r3, #8
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_GPIO_Init+0x78>)
 8000558:	f000 faee 	bl	8000b38 <HAL_GPIO_Init>

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x44>)
 8000584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6613      	str	r3, [r2, #96]	; 0x60
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x44>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_MspInit+0x44>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_MspInit+0x44>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	6593      	str	r3, [r2, #88]	; 0x58
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_MspInit+0x44>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_TIM_Base_MspInit+0x78>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d114      	bne.n	8000600 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <HAL_TIM_Base_MspInit+0x7c>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <HAL_TIM_Base_MspInit+0x7c>)
 80005dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e0:	6613      	str	r3, [r2, #96]	; 0x60
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_TIM_Base_MspInit+0x7c>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2018      	movs	r0, #24
 80005f4:	f000 fa69 	bl	8000aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80005f8:	2018      	movs	r0, #24
 80005fa:	f000 fa82 	bl	8000b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80005fe:	e018      	b.n	8000632 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_Base_MspInit+0x80>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d113      	bne.n	8000632 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_Base_MspInit+0x7c>)
 800060c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060e:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <HAL_TIM_Base_MspInit+0x7c>)
 8000610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000614:	6613      	str	r3, [r2, #96]	; 0x60
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_TIM_Base_MspInit+0x7c>)
 8000618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2018      	movs	r0, #24
 8000628:	f000 fa4f 	bl	8000aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800062c:	2018      	movs	r0, #24
 800062e:	f000 fa68 	bl	8000b02 <HAL_NVIC_EnableIRQ>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40012c00 	.word	0x40012c00
 8000640:	40021000 	.word	0x40021000
 8000644:	40014000 	.word	0x40014000

08000648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <HAL_TIM_MspPostInit+0xa0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d139      	bne.n	80006de <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <HAL_TIM_MspPostInit+0xa4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <HAL_TIM_MspPostInit+0xa4>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <HAL_TIM_MspPostInit+0xa4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_TIM_MspPostInit+0xa4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_TIM_MspPostInit+0xa4>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_TIM_MspPostInit+0xa4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800069a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f000 fa3d 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006be:	2303      	movs	r3, #3
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <HAL_TIM_MspPostInit+0xa8>)
 80006da:	f000 fa2d 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40012c00 	.word	0x40012c00
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f8c4 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000756:	f001 fa79 	bl	8001c4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800075c:	f001 fa76 	bl	8001c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000074 	.word	0x20000074
 8000768:	20000028 	.word	0x20000028

0800076c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <SystemInit+0x64>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <SystemInit+0x64>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <SystemInit+0x68>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <SystemInit+0x68>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <SystemInit+0x68>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <SystemInit+0x68>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <SystemInit+0x68>)
 8000798:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800079c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <SystemInit+0x68>)
 80007a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <SystemInit+0x68>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <SystemInit+0x68>)
 80007b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <SystemInit+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SystemInit+0x64>)
 80007be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007c2:	609a      	str	r2, [r3, #8]
#endif
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00
 80007d4:	40021000 	.word	0x40021000

080007d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007dc:	f7ff ffc6 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007e2:	e003      	b.n	80007ec <LoopCopyDataInit>

080007e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ea:	3104      	adds	r1, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <LoopForever+0xe>)
	adds	r2, r0, r1
 80007f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007f4:	d3f6      	bcc.n	80007e4 <CopyDataInit>
	ldr	r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007f8:	e002      	b.n	8000800 <LoopFillZerobss>

080007fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007fc:	f842 3b04 	str.w	r3, [r2], #4

08000800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <LoopForever+0x16>)
	cmp	r2, r3
 8000802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000804:	d3f9      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000806:	f002 fa7f 	bl	8002d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080a:	f7ff fcdf 	bl	80001cc <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000810:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000814:	08002dc0 	.word	0x08002dc0
	ldr	r0, =_sdata
 8000818:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800081c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000824:	200000c4 	.word	0x200000c4

08000828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_IRQHandler>

0800082a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000830:	2300      	movs	r3, #0
 8000832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f93d 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f80e 	bl	800085c <HAL_InitTick>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	e001      	b.n	8000850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800084c:	f7ff fe96 	bl	800057c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000850:	79fb      	ldrb	r3, [r7, #7]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_InitTick+0x6c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d023      	beq.n	80008b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_InitTick+0x70>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_InitTick+0x6c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f949 	bl	8000b1e <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10f      	bne.n	80008b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d809      	bhi.n	80008ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f913 	bl	8000aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_InitTick+0x74>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e007      	b.n	80008bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e004      	b.n	80008bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e001      	b.n	80008bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200000c0 	.word	0x200000c0

080008fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_GetTick+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200000c0 	.word	0x200000c0

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0b      	blt.n	80009a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_EnableIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a80:	d301      	bcc.n	8000a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00f      	b.n	8000aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <SysTick_Config+0x40>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f7ff ff8e 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SysTick_Config+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SysTick_Config+0x40>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff29 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff3e 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff8e 	bl	8000a08 <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5d 	bl	80009b4 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff31 	bl	8000978 <__NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffa2 	bl	8000a70 <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	e148      	b.n	8000dda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 813a 	beq.w	8000dd4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d00b      	beq.n	8000b80 <HAL_GPIO_Init+0x48>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b74:	2b11      	cmp	r3, #17
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b12      	cmp	r3, #18
 8000b7e:	d130      	bne.n	8000be2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	f003 0201 	and.w	r2, r3, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0xea>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d123      	bne.n	8000c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	220f      	movs	r2, #15
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	6939      	ldr	r1, [r7, #16]
 8000c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0203 	and.w	r2, r3, #3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 8094 	beq.w	8000dd4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb0:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb8:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc4:	4a4d      	ldr	r2, [pc, #308]	; (8000dfc <HAL_GPIO_Init+0x2c4>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cee:	d00d      	beq.n	8000d0c <HAL_GPIO_Init+0x1d4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a43      	ldr	r2, [pc, #268]	; (8000e00 <HAL_GPIO_Init+0x2c8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0x1d0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a42      	ldr	r2, [pc, #264]	; (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d101      	bne.n	8000d04 <HAL_GPIO_Init+0x1cc>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e004      	b.n	8000d0e <HAL_GPIO_Init+0x1d6>
 8000d04:	2307      	movs	r3, #7
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x1d6>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <HAL_GPIO_Init+0x1d6>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4093      	lsls	r3, r2
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d1e:	4937      	ldr	r1, [pc, #220]	; (8000dfc <HAL_GPIO_Init+0x2c4>)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d50:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f47f aeaf 	bne.w	8000b48 <HAL_GPIO_Init+0x10>
  }
}
 8000dea:	bf00      	nop
 8000dec:	371c      	adds	r7, #28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	48000400 	.word	0x48000400
 8000e04:	48000800 	.word	0x48000800
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40007000 	.word	0x40007000

08000e58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e66:	d130      	bne.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e74:	d038      	beq.n	8000ee8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2232      	movs	r2, #50	; 0x32
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9b      	lsrs	r3, r3, #18
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e9c:	e002      	b.n	8000ea4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb0:	d102      	bne.n	8000eb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1f2      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec4:	d110      	bne.n	8000ee8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e00f      	b.n	8000eea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed6:	d007      	beq.n	8000ee8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40007000 	.word	0x40007000
 8000efc:	20000000 	.word	0x20000000
 8000f00:	431bde83 	.word	0x431bde83

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f000 bc11 	b.w	800173a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f18:	4ba0      	ldr	r3, [pc, #640]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f22:	4b9e      	ldr	r3, [pc, #632]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80e4 	beq.w	8001102 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <HAL_RCC_OscConfig+0x4c>
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	f040 808b 	bne.w	800105e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	f040 8087 	bne.w	800105e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f50:	4b92      	ldr	r3, [pc, #584]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x64>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e3e8      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	4b8b      	ldr	r3, [pc, #556]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <HAL_RCC_OscConfig+0x7e>
 8000f78:	4b88      	ldr	r3, [pc, #544]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f80:	e005      	b.n	8000f8e <HAL_RCC_OscConfig+0x8a>
 8000f82:	4b86      	ldr	r3, [pc, #536]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d223      	bcs.n	8000fda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fd40 	bl	8001a1c <RCC_SetFlashLatencyFromMSIRange>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e3c9      	b.n	800173a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7c      	ldr	r2, [pc, #496]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4977      	ldr	r1, [pc, #476]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc4:	4b75      	ldr	r3, [pc, #468]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4972      	ldr	r1, [pc, #456]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
 8000fd8:	e025      	b.n	8001026 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fda:	4b70      	ldr	r3, [pc, #448]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6f      	ldr	r2, [pc, #444]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	496a      	ldr	r1, [pc, #424]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	4965      	ldr	r1, [pc, #404]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd00 	bl	8001a1c <RCC_SetFlashLatencyFromMSIRange>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e389      	b.n	800173a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001026:	f000 fc6f 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 800102a:	4601      	mov	r1, r0
 800102c:	4b5b      	ldr	r3, [pc, #364]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	4a5a      	ldr	r2, [pc, #360]	; (80011a0 <HAL_RCC_OscConfig+0x29c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	fa21 f303 	lsr.w	r3, r1, r3
 8001042:	4a58      	ldr	r2, [pc, #352]	; (80011a4 <HAL_RCC_OscConfig+0x2a0>)
 8001044:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001046:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_RCC_OscConfig+0x2a4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fc06 	bl	800085c <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d052      	beq.n	8001100 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	e36d      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d032      	beq.n	80010cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001066:	4b4d      	ldr	r3, [pc, #308]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a4c      	ldr	r2, [pc, #304]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001072:	f7ff fc43 	bl	80008fc <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107a:	f7ff fc3f 	bl	80008fc <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e356      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a3f      	ldr	r2, [pc, #252]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	493a      	ldr	r1, [pc, #232]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
 80010ca:	e01a      	b.n	8001102 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010cc:	4b33      	ldr	r3, [pc, #204]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc10 	bl	80008fc <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc0c 	bl	80008fc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e323      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_RCC_OscConfig+0x298>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1dc>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d073      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x21c>
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b0c      	cmp	r3, #12
 8001118:	d10e      	bne.n	8001138 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d10b      	bne.n	8001138 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d063      	beq.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d15f      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e300      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d106      	bne.n	8001150 <HAL_RCC_OscConfig+0x24c>
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e01d      	b.n	800118c <HAL_RCC_OscConfig+0x288>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x270>
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e00b      	b.n	800118c <HAL_RCC_OscConfig+0x288>
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_RCC_OscConfig+0x298>)
 800117a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_RCC_OscConfig+0x298>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d01b      	beq.n	80011cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fbb2 	bl	80008fc <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119a:	e010      	b.n	80011be <HAL_RCC_OscConfig+0x2ba>
 800119c:	40021000 	.word	0x40021000
 80011a0:	08002d78 	.word	0x08002d78
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fba6 	bl	80008fc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e2bd      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011be:	4baf      	ldr	r3, [pc, #700]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x2a8>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fb96 	bl	80008fc <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fb92 	bl	80008fc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e2a9      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e6:	4ba5      	ldr	r3, [pc, #660]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2d0>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d060      	beq.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d005      	beq.n	8001214 <HAL_RCC_OscConfig+0x310>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d119      	bne.n	8001242 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d116      	bne.n	8001242 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x328>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e286      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b93      	ldr	r3, [pc, #588]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	061b      	lsls	r3, r3, #24
 800123a:	4990      	ldr	r1, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001240:	e040      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d023      	beq.n	8001292 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124a:	4b8c      	ldr	r3, [pc, #560]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a8b      	ldr	r2, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fb51 	bl	80008fc <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fb4d 	bl	80008fc <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e264      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001270:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	497c      	ldr	r1, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
 8001290:	e018      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b7a      	ldr	r3, [pc, #488]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a79      	ldr	r2, [pc, #484]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fb2d 	bl	80008fc <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fb29 	bl	80008fc <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e240      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d03c      	beq.n	800134a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d01c      	beq.n	8001312 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d8:	4b68      	ldr	r3, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80012da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012de:	4a67      	ldr	r2, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fb08 	bl	80008fc <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb04 	bl	80008fc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e21b      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001302:	4b5e      	ldr	r3, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0ef      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3ec>
 8001310:	e01b      	b.n	800134a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001318:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff faeb 	bl	80008fc <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fae7 	bl	80008fc <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1fe      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800133c:	4b4f      	ldr	r3, [pc, #316]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800133e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1ef      	bne.n	800132a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80a6 	beq.w	80014a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10d      	bne.n	8001384 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a43      	ldr	r2, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800136e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001380:	2301      	movs	r3, #1
 8001382:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <HAL_RCC_OscConfig+0x57c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d118      	bne.n	80013c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x57c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3a      	ldr	r2, [pc, #232]	; (8001480 <HAL_RCC_OscConfig+0x57c>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139c:	f7ff faae 	bl	80008fc <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7ff faaa 	bl	80008fc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1c1      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x57c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_RCC_OscConfig+0x4d8>
 80013ca:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80013cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d0:	4a2a      	ldr	r2, [pc, #168]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013da:	e024      	b.n	8001426 <HAL_RCC_OscConfig+0x522>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d110      	bne.n	8001406 <HAL_RCC_OscConfig+0x502>
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80013e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ea:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80013f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_RCC_OscConfig+0x578>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001404:	e00f      	b.n	8001426 <HAL_RCC_OscConfig+0x522>
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_RCC_OscConfig+0x578>)
 8001418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141c:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142e:	f7ff fa65 	bl	80008fc <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff fa61 	bl	80008fc <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e176      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x578>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ed      	beq.n	8001436 <HAL_RCC_OscConfig+0x532>
 800145a:	e01a      	b.n	8001492 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fa4e 	bl	80008fc <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001462:	e00f      	b.n	8001484 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fa4a 	bl	80008fc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d906      	bls.n	8001484 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e15f      	b.n	800173a <HAL_RCC_OscConfig+0x836>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001484:	4baa      	ldr	r3, [pc, #680]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 8001486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e8      	bne.n	8001464 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4ba5      	ldr	r3, [pc, #660]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	4aa4      	ldr	r2, [pc, #656]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800149e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d03c      	beq.n	800152a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014b8:	4b9d      	ldr	r3, [pc, #628]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80014ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014be:	4a9c      	ldr	r2, [pc, #624]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fa18 	bl	80008fc <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014d0:	f7ff fa14 	bl	80008fc <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e12b      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014e2:	4b93      	ldr	r3, [pc, #588]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80014e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0ef      	beq.n	80014d0 <HAL_RCC_OscConfig+0x5cc>
 80014f0:	e01b      	b.n	800152a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014f2:	4b8f      	ldr	r3, [pc, #572]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80014f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f8:	4a8d      	ldr	r2, [pc, #564]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff f9fb 	bl	80008fc <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150a:	f7ff f9f7 	bl	80008fc <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10e      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800151c:	4b84      	ldr	r3, [pc, #528]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800151e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ef      	bne.n	800150a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8102 	beq.w	8001738 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	2b02      	cmp	r3, #2
 800153a:	f040 80c5 	bne.w	80016c8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800153e:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0203 	and.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	429a      	cmp	r2, r3
 8001550:	d12c      	bne.n	80015ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	3b01      	subs	r3, #1
 800155e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d123      	bne.n	80015ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d11b      	bne.n	80015ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d113      	bne.n	80015ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	3b01      	subs	r3, #1
 8001592:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d109      	bne.n	80015ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	3b01      	subs	r3, #1
 80015a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d067      	beq.n	800167c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d062      	beq.n	8001678 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0bb      	b.n	800173a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015c2:	4b5b      	ldr	r3, [pc, #364]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80015c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ce:	f7ff f995 	bl	80008fc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f991 	bl	80008fc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0a8      	b.n	800173a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	4b51      	ldr	r3, [pc, #324]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <HAL_RCC_OscConfig+0x830>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001604:	3a01      	subs	r2, #1
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	4311      	orrs	r1, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800160e:	0212      	lsls	r2, r2, #8
 8001610:	4311      	orrs	r1, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001616:	0852      	lsrs	r2, r2, #1
 8001618:	3a01      	subs	r2, #1
 800161a:	0552      	lsls	r2, r2, #21
 800161c:	4311      	orrs	r1, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001622:	0852      	lsrs	r2, r2, #1
 8001624:	3a01      	subs	r2, #1
 8001626:	0652      	lsls	r2, r2, #25
 8001628:	4311      	orrs	r1, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800162e:	06d2      	lsls	r2, r2, #27
 8001630:	430a      	orrs	r2, r1
 8001632:	493f      	ldr	r1, [pc, #252]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 8001634:	4313      	orrs	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001638:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800163e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001642:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a39      	ldr	r2, [pc, #228]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001650:	f7ff f954 	bl	80008fc <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f950 	bl	80008fc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e067      	b.n	800173a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001676:	e05f      	b.n	8001738 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e05e      	b.n	800173a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d157      	bne.n	8001738 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a28      	ldr	r2, [pc, #160]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800169a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016a0:	f7ff f92c 	bl	80008fc <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f928 	bl	80008fc <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e03f      	b.n	800173a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x7a4>
 80016c6:	e037      	b.n	8001738 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d02d      	beq.n	800172a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016ec:	f023 0303 	bic.w	r3, r3, #3
 80016f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 80016f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff f8fb 	bl	80008fc <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f8f7 	bl	80008fc <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e00e      	b.n	800173a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_RCC_OscConfig+0x82c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x806>
 8001728:	e006      	b.n	8001738 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e005      	b.n	800173a <HAL_RCC_OscConfig+0x836>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0c8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d910      	bls.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4961      	ldr	r1, [pc, #388]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b0      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d04c      	beq.n	800182e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179c:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d121      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e09e      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d115      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e092      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e086      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e07e      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 0203 	bic.w	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	493f      	ldr	r1, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017fe:	f7ff f87d 	bl	80008fc <HAL_GetTick>
 8001802:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	e00a      	b.n	800181c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f879 	bl	80008fc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e066      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 020c 	and.w	r2, r3, #12
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	429a      	cmp	r2, r3
 800182c:	d1eb      	bne.n	8001806 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	492c      	ldr	r1, [pc, #176]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4924      	ldr	r1, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e036      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4918      	ldr	r1, [pc, #96]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4910      	ldr	r1, [pc, #64]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ba:	f000 f825 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018be:	4601      	mov	r1, r0
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	fa21 f303 	lsr.w	r3, r1, r3
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe ffbc 	bl	800085c <HAL_InitTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80018e8:	7afb      	ldrb	r3, [r7, #11]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08002d78 	.word	0x08002d78
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d121      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11e      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e005      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001958:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d102      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	e004      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d101      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x110>)
 800198e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d133      	bne.n	80019fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0xa4>
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80019aa:	e005      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019ae:	617b      	str	r3, [r7, #20]
      break;
 80019b0:	e005      	b.n	80019be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x110>)
 80019b4:	617b      	str	r3, [r7, #20]
      break;
 80019b6:	e002      	b.n	80019be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	617b      	str	r3, [r7, #20]
      break;
 80019bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	3301      	adds	r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	fb02 f203 	mul.w	r2, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x104>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0e5b      	lsrs	r3, r3, #25
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019fe:	69bb      	ldr	r3, [r7, #24]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08002d88 	.word	0x08002d88
 8001a14:	00f42400 	.word	0x00f42400
 8001a18:	007a1200 	.word	0x007a1200

08001a1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a34:	f7ff fa02 	bl	8000e3c <HAL_PWREx_GetVoltageRange>
 8001a38:	6178      	str	r0, [r7, #20]
 8001a3a:	e014      	b.n	8001a66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a54:	f7ff f9f2 	bl	8000e3c <HAL_PWREx_GetVoltageRange>
 8001a58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6c:	d10b      	bne.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d919      	bls.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2ba0      	cmp	r3, #160	; 0xa0
 8001a78:	d902      	bls.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e013      	b.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e010      	b.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d902      	bls.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e00a      	b.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b80      	cmp	r3, #128	; 0x80
 8001a96:	d102      	bne.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a98:	2302      	movs	r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	e004      	b.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b70      	cmp	r3, #112	; 0x70
 8001aa2:	d101      	bne.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 0207 	bic.w	r2, r3, #7
 8001ab0:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e049      	b.n	8001b82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe fd5e 	bl	80005c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 fbf4 	bl	8002308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e049      	b.n	8001c30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f841 	bl	8001c38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4610      	mov	r0, r2
 8001bca:	f000 fb9d 	bl	8002308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d122      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0202 	mvn.w	r2, #2
 8001c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fb1b 	bl	80022ca <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fb0d 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fb1e 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0204 	mvn.w	r2, #4
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 faf1 	bl	80022ca <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fae3 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 faf4 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0208 	mvn.w	r2, #8
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2204      	movs	r2, #4
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fac7 	bl	80022ca <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fab9 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 faca 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0210 	mvn.w	r2, #16
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa9d 	bl	80022ca <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa8f 	bl	80022b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 faa0 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0201 	mvn.w	r2, #1
 8001dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fa69 	bl	80022a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b80      	cmp	r3, #128	; 0x80
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d107      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 ff72 	bl	8002ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0a:	d10e      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	d107      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 ff65 	bl	8002cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d10e      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d107      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fa4e 	bl	80022f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d10e      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d107      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0220 	mvn.w	r2, #32
 8001e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 ff25 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e0fd      	b.n	80020a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b14      	cmp	r3, #20
 8001eb2:	f200 80f0 	bhi.w	8002096 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f11 	.word	0x08001f11
 8001ec0:	08002097 	.word	0x08002097
 8001ec4:	08002097 	.word	0x08002097
 8001ec8:	08002097 	.word	0x08002097
 8001ecc:	08001f51 	.word	0x08001f51
 8001ed0:	08002097 	.word	0x08002097
 8001ed4:	08002097 	.word	0x08002097
 8001ed8:	08002097 	.word	0x08002097
 8001edc:	08001f93 	.word	0x08001f93
 8001ee0:	08002097 	.word	0x08002097
 8001ee4:	08002097 	.word	0x08002097
 8001ee8:	08002097 	.word	0x08002097
 8001eec:	08001fd3 	.word	0x08001fd3
 8001ef0:	08002097 	.word	0x08002097
 8001ef4:	08002097 	.word	0x08002097
 8001ef8:	08002097 	.word	0x08002097
 8001efc:	08002015 	.word	0x08002015
 8001f00:	08002097 	.word	0x08002097
 8001f04:	08002097 	.word	0x08002097
 8001f08:	08002097 	.word	0x08002097
 8001f0c:	08002055 	.word	0x08002055
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fa5a 	bl	80023d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6999      	ldr	r1, [r3, #24]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	619a      	str	r2, [r3, #24]
      break;
 8001f4e:	e0a3      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fab6 	bl	80024c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6999      	ldr	r1, [r3, #24]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	619a      	str	r2, [r3, #24]
      break;
 8001f90:	e082      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fb0f 	bl	80025bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0208 	orr.w	r2, r2, #8
 8001fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0204 	bic.w	r2, r2, #4
 8001fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69d9      	ldr	r1, [r3, #28]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
      break;
 8001fd0:	e062      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fb67 	bl	80026ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	61da      	str	r2, [r3, #28]
      break;
 8002012:	e041      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fba4 	bl	8002768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0208 	orr.w	r2, r2, #8
 800202e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002052:	e021      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fbdc 	bl	8002818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800206e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002094:	e000      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop

080020ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_TIM_ConfigClockSource+0x18>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0a8      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d067      	beq.n	80021d0 <HAL_TIM_ConfigClockSource+0x124>
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d80b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x70>
 8002104:	2b10      	cmp	r3, #16
 8002106:	d073      	beq.n	80021f0 <HAL_TIM_ConfigClockSource+0x144>
 8002108:	2b10      	cmp	r3, #16
 800210a:	d802      	bhi.n	8002112 <HAL_TIM_ConfigClockSource+0x66>
 800210c:	2b00      	cmp	r3, #0
 800210e:	d06f      	beq.n	80021f0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002110:	e078      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002112:	2b20      	cmp	r3, #32
 8002114:	d06c      	beq.n	80021f0 <HAL_TIM_ConfigClockSource+0x144>
 8002116:	2b30      	cmp	r3, #48	; 0x30
 8002118:	d06a      	beq.n	80021f0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800211a:	e073      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800211c:	2b70      	cmp	r3, #112	; 0x70
 800211e:	d00d      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x90>
 8002120:	2b70      	cmp	r3, #112	; 0x70
 8002122:	d804      	bhi.n	800212e <HAL_TIM_ConfigClockSource+0x82>
 8002124:	2b50      	cmp	r3, #80	; 0x50
 8002126:	d033      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xe4>
 8002128:	2b60      	cmp	r3, #96	; 0x60
 800212a:	d041      	beq.n	80021b0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800212c:	e06a      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	d066      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0x156>
 8002134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002138:	d017      	beq.n	800216a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800213a:	e063      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f000 fcc0 	bl	8002ad0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800215e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	609a      	str	r2, [r3, #8]
      break;
 8002168:	e04c      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f000 fca9 	bl	8002ad0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800218c:	609a      	str	r2, [r3, #8]
      break;
 800218e:	e039      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	461a      	mov	r2, r3
 800219e:	f000 fc1d 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2150      	movs	r1, #80	; 0x50
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fc76 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 80021ae:	e029      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	461a      	mov	r2, r3
 80021be:	f000 fc3c 	bl	8002a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2160      	movs	r1, #96	; 0x60
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fc66 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 80021ce:	e019      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	461a      	mov	r2, r3
 80021de:	f000 fbfd 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fc56 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 80021ee:	e009      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fc4d 	bl	8002a9a <TIM_ITRx_SetConfig>
        break;
 8002200:	e000      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002232:	2302      	movs	r3, #2
 8002234:	e031      	b.n	800229a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fb3f 	bl	80028cc <TIM_SlaveTimer_SetConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e018      	b.n	800229a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002276:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002286:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <TIM_Base_SetConfig+0xbc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0x20>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002326:	d108      	bne.n	800233a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <TIM_Base_SetConfig+0xbc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00b      	beq.n	800235a <TIM_Base_SetConfig+0x52>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0x52>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <TIM_Base_SetConfig+0xc0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0x52>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <TIM_Base_SetConfig+0xc4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <TIM_Base_SetConfig+0xbc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0xa0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <TIM_Base_SetConfig+0xc0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0xa0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <TIM_Base_SetConfig+0xc4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40014000 	.word	0x40014000
 80023cc:	40014400 	.word	0x40014400

080023d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0201 	bic.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 0302 	bic.w	r3, r3, #2
 800241c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a24      	ldr	r2, [pc, #144]	; (80024bc <TIM_OC1_SetConfig+0xec>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <TIM_OC1_SetConfig+0x70>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <TIM_OC1_SetConfig+0xf0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <TIM_OC1_SetConfig+0x70>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <TIM_OC1_SetConfig+0xf4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10c      	bne.n	800245a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 0308 	bic.w	r3, r3, #8
 8002446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <TIM_OC1_SetConfig+0xec>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <TIM_OC1_SetConfig+0xa2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <TIM_OC1_SetConfig+0xf0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d003      	beq.n	8002472 <TIM_OC1_SetConfig+0xa2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <TIM_OC1_SetConfig+0xf4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40014000 	.word	0x40014000
 80024c4:	40014400 	.word	0x40014400

080024c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f023 0210 	bic.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0320 	bic.w	r3, r3, #32
 8002516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_OC2_SetConfig+0xe8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d10d      	bne.n	8002548 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <TIM_OC2_SetConfig+0xe8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_OC2_SetConfig+0x98>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <TIM_OC2_SetConfig+0xec>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_OC2_SetConfig+0x98>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <TIM_OC2_SetConfig+0xf0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d113      	bne.n	8002588 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800256e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	621a      	str	r2, [r3, #32]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40014400 	.word	0x40014400

080025bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <TIM_OC3_SetConfig+0xe4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10d      	bne.n	800263a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <TIM_OC3_SetConfig+0xe4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_OC3_SetConfig+0x96>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <TIM_OC3_SetConfig+0xe8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_OC3_SetConfig+0x96>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <TIM_OC3_SetConfig+0xec>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d113      	bne.n	800267a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	621a      	str	r2, [r3, #32]
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40014000 	.word	0x40014000
 80026a8:	40014400 	.word	0x40014400

080026ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <TIM_OC4_SetConfig+0xb0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_OC4_SetConfig+0x74>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <TIM_OC4_SetConfig+0xb4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <TIM_OC4_SetConfig+0x74>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <TIM_OC4_SetConfig+0xb8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d109      	bne.n	8002734 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400

08002768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <TIM_OC5_SetConfig+0xa4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <TIM_OC5_SetConfig+0x6a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <TIM_OC5_SetConfig+0xa8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d003      	beq.n	80027d2 <TIM_OC5_SetConfig+0x6a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a11      	ldr	r2, [pc, #68]	; (8002814 <TIM_OC5_SetConfig+0xac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d109      	bne.n	80027e6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	621a      	str	r2, [r3, #32]
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40014000 	.word	0x40014000
 8002814:	40014400 	.word	0x40014400

08002818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	051b      	lsls	r3, r3, #20
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <TIM_OC6_SetConfig+0xa8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <TIM_OC6_SetConfig+0x6c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <TIM_OC6_SetConfig+0xac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <TIM_OC6_SetConfig+0x6c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <TIM_OC6_SetConfig+0xb0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d109      	bne.n	8002898 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	029b      	lsls	r3, r3, #10
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40014000 	.word	0x40014000
 80028c8:	40014400 	.word	0x40014400

080028cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b30      	cmp	r3, #48	; 0x30
 8002914:	d05c      	beq.n	80029d0 <TIM_SlaveTimer_SetConfig+0x104>
 8002916:	2b30      	cmp	r3, #48	; 0x30
 8002918:	d806      	bhi.n	8002928 <TIM_SlaveTimer_SetConfig+0x5c>
 800291a:	2b10      	cmp	r3, #16
 800291c:	d058      	beq.n	80029d0 <TIM_SlaveTimer_SetConfig+0x104>
 800291e:	2b20      	cmp	r3, #32
 8002920:	d056      	beq.n	80029d0 <TIM_SlaveTimer_SetConfig+0x104>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d054      	beq.n	80029d0 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002926:	e054      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d03d      	beq.n	80029a8 <TIM_SlaveTimer_SetConfig+0xdc>
 800292c:	2b50      	cmp	r3, #80	; 0x50
 800292e:	d802      	bhi.n	8002936 <TIM_SlaveTimer_SetConfig+0x6a>
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d010      	beq.n	8002956 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8002934:	e04d      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8002936:	2b60      	cmp	r3, #96	; 0x60
 8002938:	d040      	beq.n	80029bc <TIM_SlaveTimer_SetConfig+0xf0>
 800293a:	2b70      	cmp	r3, #112	; 0x70
 800293c:	d000      	beq.n	8002940 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800293e:	e048      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68d9      	ldr	r1, [r3, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f000 f8be 	bl	8002ad0 <TIM_ETR_SetConfig>
      break;
 8002954:	e03d      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d101      	bne.n	8002962 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e038      	b.n	80029d4 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002988:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	621a      	str	r2, [r3, #32]
      break;
 80029a6:	e014      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	461a      	mov	r2, r3
 80029b6:	f000 f811 	bl	80029dc <TIM_TI1_ConfigInputStage>
      break;
 80029ba:	e00a      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f000 f836 	bl	8002a3a <TIM_TI2_ConfigInputStage>
      break;
 80029ce:	e000      	b.n	80029d2 <TIM_SlaveTimer_SetConfig+0x106>
        break;
 80029d0:	bf00      	nop
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 030a 	bic.w	r3, r3, #10
 8002a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0210 	bic.w	r2, r3, #16
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	031b      	lsls	r3, r3, #12
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 0307 	orr.w	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	021a      	lsls	r2, r3, #8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e04f      	b.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d108      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d004      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40014000 	.word	0x40014000

08002bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e060      	b.n	8002cba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d115      	bne.n	8002ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40012c00 	.word	0x40012c00

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <__libc_init_array>:
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	4e0d      	ldr	r6, [pc, #52]	; (8002d40 <__libc_init_array+0x38>)
 8002d0c:	4c0d      	ldr	r4, [pc, #52]	; (8002d44 <__libc_init_array+0x3c>)
 8002d0e:	1ba4      	subs	r4, r4, r6
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	2500      	movs	r5, #0
 8002d14:	42a5      	cmp	r5, r4
 8002d16:	d109      	bne.n	8002d2c <__libc_init_array+0x24>
 8002d18:	4e0b      	ldr	r6, [pc, #44]	; (8002d48 <__libc_init_array+0x40>)
 8002d1a:	4c0c      	ldr	r4, [pc, #48]	; (8002d4c <__libc_init_array+0x44>)
 8002d1c:	f000 f820 	bl	8002d60 <_init>
 8002d20:	1ba4      	subs	r4, r4, r6
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	2500      	movs	r5, #0
 8002d26:	42a5      	cmp	r5, r4
 8002d28:	d105      	bne.n	8002d36 <__libc_init_array+0x2e>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d30:	4798      	blx	r3
 8002d32:	3501      	adds	r5, #1
 8002d34:	e7ee      	b.n	8002d14 <__libc_init_array+0xc>
 8002d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3a:	4798      	blx	r3
 8002d3c:	3501      	adds	r5, #1
 8002d3e:	e7f2      	b.n	8002d26 <__libc_init_array+0x1e>
 8002d40:	08002db8 	.word	0x08002db8
 8002d44:	08002db8 	.word	0x08002db8
 8002d48:	08002db8 	.word	0x08002db8
 8002d4c:	08002dbc 	.word	0x08002dbc

08002d50 <memset>:
 8002d50:	4402      	add	r2, r0
 8002d52:	4603      	mov	r3, r0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <_init>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	bf00      	nop
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr

08002d6c <_fini>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr
